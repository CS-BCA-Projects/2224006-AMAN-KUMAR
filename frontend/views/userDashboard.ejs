<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>AWGP Seva Portal</title>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/css/custom.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/custom.css">
    <link rel="icon" type="image/png" class="rounded-circle" href="/images/logo.jpg">
    <script src="https://kit.fontawesome.com/a96a0fdf1a.js" crossorigin="anonymous"></script>

    <style>
        body {
            background-color: #f8f9fa;
        }

        * {
            font-family: "Roboto", sans-serif;
        }

        .navbar {
            background-color: #0000ff;
        }

        .logo-img {
            border-radius: 50%;
        }

        .navbar-brand img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
        }

        .event-status {
            font-weight: bold;
            padding: 5px 10px;
            border-radius: 5px;
        }

        .approved {
            background-color: #28a745;
            color: white;
        }

        .pending {
            background-color: #ffc107;
            color: black;
        }

        .assigned {
            background-color: #17a2b8;
            color: white;
        }

        .rejected {
            background-color: #dc3545;
            color: white;
        }

        .card-custom {
            border-radius: 10px;
            box-shadow: 2px 4px 10px rgba(0, 0, 0, 0.1);
            padding: 15px;
        }

        .welcome {
            border-bottom: 2px solid rgb(35, 1, 255);
            padding-bottom: 5px;
            width: fit-content;
            font-size: 15px;
        }

        .new-event {
            border: 1px solid rgb(35, 1, 255);
            padding: 5px 10px;
            border-radius: 5px;
            background-color: white;
            font-size: 15px;
        }

        .new-event:hover {
            background-color: rgb(35, 1, 255);
            color: white;
            transition: ease-in;
        }

        .cust-table {
            width: 100%;
            margin-top: 30px;
            border-collapse: separate;
            /* Enables spacing */
            border-spacing: 0 20px;
            /* Adds 10px gap between rows */
        }

        thead {
            background-color: rgb(35, 1, 255);
            color: white;
            margin-bottom: 20px;
        }

        th {
            padding: 10px 10px;
            border-left: 1px solid white;
            text-align: center;
        }

        /* Apply border-radius to first and last header cells */
        table thead tr th:first-child,
        #eventTableBody tr td:first-child {
            border-top-left-radius: 10px;
            border-bottom-left-radius: 10px;
        }

        table thead tr th:last-child,
        #eventTableBody tr td:last-child {
            border-top-right-radius: 10px;
            border-bottom-right-radius: 10px;
        }

        .corner {
            border-radius: 10px;
        }

        .right-corner {
            border-top-right-radius: 10px;
            border-bottom-right-radius: 10px;
        }

        .left-corner {
            border-top-left-radius: 10px;
            border-bottom-left-radius: 10px;
        }

        #eventTableBody tr td {
            border: 1px solid rgb(35, 1, 255);
            padding: 10px 20px;
        }

        td {
            vertical-align: middle;
            /* Aligns content vertically */
        }

        td .btn-container {
            display: flex;
            align-items: center;
            justify-content: center;
            /* Centers buttons */
            height: 100%;
            /* Makes container take full td height */
        }

        /* Overlay styling for popups */
        .overlay {
            display: none;
            /* Hidden by default */
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            z-index: 9999;
            align-items: center;
            justify-content: center;
        }

        /* Popup content styling */
        .overlay-content {
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            width: 90%;
            max-width: 400px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
            position: relative;
        }

        /* Close button styling */
        .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 28px;
            border: none;
            background: none;
            color: black;
            cursor: pointer;
        }

        /* Ensure the badge aligns properly on top-right of the bell */
        #notificationBadge {
            position: absolute;
            top: 5px;
            /* Moves badge higher */
            right: -2px;
            /* Moves badge slightly to the right */
            font-size: 10px;
            width: 16px;
            height: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2px;
            border-radius: 50%;
        }

        /* Style for user profile dropdown */
        .profile-dropdown {
            display: none;
            /* Hidden by default */
            position: absolute;
            top: 50px;
            /* Adjust distance below user icon */
            right: 10px;
            /* Align with the user icon */
            background-color: #d9d9d9;
            /* Light gray background */
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            padding: 10px;
            min-width: 180px;
            z-index: 1000;
            border: 2px solid #007bff;
            /* Blue border */
        }

        /* Style for username */
        .profile-dropdown p ,
        .profile-dropdown li{
            font-size: 16px;
            font-weight: bold;
            text-align: center;
            margin: 0;
            padding: 10px;
        }

        /* Blue underline */
        .profile-dropdown hr {
            border: 1px solid blue;
            margin: 5px 0;
        }

        /* Logout button */
        .logout-btn {
            width: 100%;
            background: none;
            border: none;
            font-size: 16px;
            font-weight: bold;
            color: black;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 8px 0;
            cursor: pointer;
        }

        /* Logout icon */
        .logout-btn i {
            margin-left: 5px;
        }
        .menu-box{
            top : 50px;
            left: 100%;
        }

        @media (max-width : 991px) {
            #menu-bar-box {
                background-color: #0000ff;
            }
            .navbar-collapse{
                position: absolute;
                z-index: 100;
                top: 60px;
                left: 80%;
            }
            #menu-bar-box a {
                color: black;
                padding: 15px;
            }   
            #notificationBadge{
                left: 5px;
            }
        }
    </style>
</head>

<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg d-flex justify-content-between px-3">
        <div class="d-flex align-items-center">
            <img src="/images/logo.jpg" alt="AWGP Logo" width="50" height="50" class="logo-img">
            <h4 class="ms-2 fs-6 fw-light text-white">AWGP Seva Portal</h4>
        </div>
        <div class="d-flex align-items-center">
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto" id="menu-bar-box">
                    <li class="nav-item"><a class="nav-link text-white" href="/api/v1/user-dashboard">Home</a></li>
                    <li class="nav-item"><a class="nav-link text-white" href="/api/v1/about">About</a></li>
                    <li class="nav-item"><a class="nav-link text-white" href="/api/v1/contact">Contact</a></li>
                    <li class="nav-item"><a class="nav-link text-white" href="/api/v1/help">Help</a></li>
                </ul>
            </div>
            <ul class="navbar-nav ms-auto d-flex flex-row ">
                <!-- ðŸ”” Notification Bell Icon -->
                <li class="nav-item position-relative ">
                    <a class="nav-link" href="/api/v1/notifications" id="showNotifications">
                        <i class="fas fa-bell position-relative"></i> <!-- Bell icon -->
                        <span id="notificationBadge" class="badge bg-danger rounded-circle position-absolute"
                            style="display: none;"></span>
                    </a>
                </li>

                <!-- ðŸ‘¤ User Profile Icon -->
                <li class="nav-item ms-3 me-3">
                    <a class="nav-link" href="#" id="showUserProfile">
                        <i class="fas fa-user-circle"></i>
                    </a>
                </li>
            </ul>

            <button class="navbar-toggler" id="menu-bar" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon " style="height: 16px; width: 16px;"></span>
            </button>
        </div>

    </nav>

    <!-- ðŸ‘¤ User Profile Dropdown (Positioned below user icon) -->
    <div id="userProfileDropdown" class="profile-dropdown">
        <p id="profileUserName"></p>
        <hr> <!-- Blue underline -->
        <button class="logout-btn" onclick="logout()">Log Out <i class="fas fa-sign-out-alt"></i></button>
        <hr> <!-- Blue underline -->
        <button class="logout-btn" onclick="window.location.href='/api/v1/changePassword'">Change Password</button>
    </div>


    <!-- Buttons -->
    <div class="container mt-3">
        <div class="d-flex justify-content-between align-items-center">
            <button class="btn btn-outline-danger" id="showUserDetails">
                <i class="fas fa-map-marker-alt"></i> Location
            </button>
            <!-- User Details Overlay -->
            <div id="userDetailsOverlay" class="overlay">
                <div class="overlay-content">
                    <button class="close-btn" id="closeOverlay">&times;</button>
                    <h3>User Contact Details</h3>
                    <p><strong>Name:</strong> <span id="overlayUserName"></span></p>
                    <p><strong>Address:</strong> <span id="overlayUserAddress"></span></p>
                    <p><strong>State:</strong> <span id="overlayUserState"></span></p>
                    <p><strong>Pin Code:</strong> <span id="overlayUserPin"></span></p>
                    <p><strong>Phone:</strong> <span id="overlayUserPhone"></span></p>
                </div>
            </div>

            <a href="/api/v1/user-dashboard/add-event">
                <button class="new-event">+ New Event</button>
            </a>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-4">
            <h5 id="eventTitle" class="welcome">Your recent events status</h5>
            <select id="eventDropdown" class="form-select w-auto">
                <option value="recent" selected>Recent Events</option>
                <option value="completed">Completed Events</option>
                <option value="rejected">Rejected Events</option>
            </select>
        </div>

        <!-- Table for Desktop View -->
        <div class="d-none d-md-block">
            <table class="cust-table">
                <thead>
                    <tr>
                        <th>Event Details</th>
                        <th>Date / Time</th>
                        <th>Status</th>
                        <th id="actionColumn">Action</th>
                    </tr>
                </thead>
                <tbody id="eventTableBody">
                    <!-- Dynamically filled via JavaScript -->
                </tbody>
            </table>
        </div>

        <!-- Mobile View (Card Layout) -->
        <div class="d-md-none">
            <h5 class="text-center bg-primary text-white p-2 rounded mt-4">Details</h5>
            <div id="eventCardsContainer">
                <!-- Dynamically filled via JavaScript -->
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            updateNotificationBadge();
            const eventDropdown = document.getElementById("eventDropdown");
            const eventTitle = document.getElementById("eventTitle");
            const eventTableBody = document.getElementById("eventTableBody");
            const eventCardsContainer = document.getElementById("eventCardsContainer")

            //   Fix: Wrap JSON data in quotes
            const user = JSON.parse('<%- JSON.stringify(user) %>');
            const recentEvents = JSON.parse('<%- JSON.stringify(recentEvents) %>');
            const completedEvents = JSON.parse('<%- JSON.stringify(completedEvents) %>');
            const rejectedEvents = JSON.parse('<%- JSON.stringify(rejectedEvents) %>');

            function updateEventTable(selectedType) {
                eventTableBody.innerHTML = ""; // Clear previous content
                eventCardsContainer.innerHTML = ""

                let selectedEvents;
                if (selectedType === "recent") {
                    selectedEvents = recentEvents;
                    eventTitle.textContent = "Your Recent Events";
                    document.querySelector("th#actionColumn").style.display = ""; // Show Action Column
                } else if (selectedType === "completed") {
                    selectedEvents = completedEvents;
                    eventTitle.textContent = "Your Completed Events";
                    document.querySelector("th#actionColumn").style.display = "none"; // Hide Action Column
                } else {
                    selectedEvents = rejectedEvents;
                    eventTitle.textContent = "Your Rejected Events";
                    document.querySelector("th#actionColumn").style.display = "none"; // Hide Action Column
                }

                if (selectedEvents.length === 0) {
                    eventTableBody.innerHTML = `
                    <tr>
                        <td colspan="4" class="text-center corner"><strong>No ${selectedType} events yet.</strong></td>
                    </tr>
                `;

                eventCardsContainer.innerHTML = `
                    <div>
                        <p colspan="4" class="text-center corner"><strong>No ${selectedType} events yet.</strong></p>
                    </div>
                `
                    return;
                }

                selectedEvents.forEach(event => {
                    eventTableBody.innerHTML += `
                        <tr>
                            <td>
                                <strong>${user.name}</strong><br>
                                <strong>Event: <span class="fw-light">${event.eventType}</span></strong><br>
                                Address: ${user.address || "Not Provided"}, ${user.state || "N/A"}<br>
                                Pin: ${user.pinCode || "N/A"}<br>
                                M.no: ${user.phone || "N/A"}
                            </td>
                            <td>
                                Date: ${new Date(event.requested_date).toLocaleDateString("en-CA")}<br>
                                Time: ${event.requested_time}
                            </td>
                            <td>
                                <span class="event-status ${event.status.toLowerCase()}">${event.status}</span>
                            </td>
                            ${selectedType === "recent" ? `
                            <td class="btn-container">
                                <button class="btn btn-success edit-btn mt-2" data-id="${event._id}">Update</button>
                                <button class="btn btn-danger cancel-btn mt-2" data-id="${event._id}">Cancel</button>
                            </td>` : ""}
                        </tr>
                    `;

                    // **Mobile Card View**
                    eventCardsContainer.innerHTML += `
                        <div class="card p-2 mt-4 border-primary mb-4">
                            <p><strong>${user.name}</strong></p>
                            <p><strong>Event:</strong> ${event.eventType}</p>
                            <p><strong>Address:</strong> ${user.address || "Not Provided"}, ${user.state || "N/A"}</p>
                            <p><strong>Pin:</strong> ${user.pinCode || "N/A"}</p>
                            <p><strong>M.no:</strong> ${user.phone || "N/A"}</p>
                            <p><strong>Date:</strong> ${new Date(event.requested_date).toLocaleDateString("en-CA")}</p>
                            <p><strong>Time:</strong> ${event.requested_time}</p>
                            <p><strong>Status:</strong> <span class="event-status ${event.status.toLowerCase()}">${event.status}</span></p>
                            ${selectedType === "recent" ? `
                            <div class="d-flex justify-content-between">
                                <button class="btn btn-success w-50 edit-btn me-2" data-id="${event._id}">Update</button>
                                <button class="btn btn-danger w-50 cancel-btn ms-2 " data-id="${event._id}">Cancel</button>
                            </div>` : ""}
                        </div>
                    `;
                });
            }

            // Initialize table with Recent Events
            updateEventTable("recent");

            // Change table data when dropdown changes
            eventDropdown.addEventListener("change", function () {
                updateEventTable(eventDropdown.value);
            });
        });

        document.addEventListener("click", function (event) {
            if (event.target.classList.contains("edit-btn")) {
                const eventId = event.target.dataset.id;
                window.location.href = `/api/v1/update-event/${eventId}`; // Redirect to update page
            }
        });

        document.addEventListener("click", function (event) {
            if (event.target.classList.contains("cancel-btn")) {
                const eventId = event.target.dataset.id;

                if (confirm("Are you sure you want to cancel this event?")) {
                    fetch(`/api/v1/cancel/${eventId}`, { method: "DELETE" })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert("Event canceled successfully!");
                                location.reload(); // Refresh the page
                            } else {
                                alert("Failed to cancel event.");
                            }
                        })
                        .catch(error => console.error("Error:", error));
                }
            }
        });


        // Show User Details on Click
        document.addEventListener("DOMContentLoaded", function () {
            const showDetailsBtn = document.getElementById("showUserDetails");
            const closeOverlayBtn = document.getElementById("closeOverlay");
            const userDetailsOverlay = document.getElementById("userDetailsOverlay");

            //   Use the user data from EJS
            const user = JSON.parse('<%- JSON.stringify(user) %>');

            //   Show User Details **Only When Button is Clicked**
            showDetailsBtn.addEventListener("click", function () {
                document.getElementById("overlayUserName").textContent = user.name || "Not Provided";
                document.getElementById("overlayUserAddress").textContent = user.address || "Not Provided";
                document.getElementById("overlayUserState").textContent = user.state || "N/A";
                document.getElementById("overlayUserPin").textContent = user.pinCode || "N/A";
                document.getElementById("overlayUserPhone").textContent = user.phone || "N/A";

                userDetailsOverlay.style.display = "flex"; // Show overlay only when clicked
            });

            //   Close Overlay on Click
            closeOverlayBtn.addEventListener("click", function () {
                userDetailsOverlay.style.display = "none"; // Hide overlay
            });
        });

        document.addEventListener("DOMContentLoaded", function () {
            const userProfileBtn = document.getElementById("showUserProfile");
            const userProfileDropdown = document.getElementById("userProfileDropdown");
            const profileUserName = document.getElementById("profileUserName");

            const user = JSON.parse('<%- JSON.stringify(user) %>');

            // Show or hide dropdown on click
            userProfileBtn.addEventListener("click", function (event) {
                userProfileDropdown.style.display =
                    userProfileDropdown.style.display === "block" ? "none" : "block";
                event.stopPropagation(); // Prevent closing immediately
                profileUserName.innerHTML = user.name;
            });

            // Hide dropdown when clicking outside
            document.addEventListener("click", function (event) {
                if (!userProfileBtn.contains(event.target) && !userProfileDropdown.contains(event.target)) {
                    userProfileDropdown.style.display = "none";
                }
            });
        });

        // Logout function
        function logout() {
            fetch("/api/v1/logout", { method: "POST" })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert("Logged out successfully!");
                        window.location.href = "/api/v1/login";
                    } else {
                        alert("Logout failed. Try again.");
                    }
                })
                .catch(error => console.error("Error:", error));
        }
        function changePassword() {

        }

        function updateNotificationBadge() {
            fetch("/api/v1/notifications/count")
                .then(response => response.json())
                .then(data => {
                    const notificationBadge = document.getElementById("notificationBadge");

                    if (data.count > 0) {
                        notificationBadge.textContent = data.count;
                        notificationBadge.style.display = "flex"; // Show badge
                    } else {
                        notificationBadge.style.display = "none"; // Hide badge if no notifications
                    }
                })
                .catch(error => console.error("Error fetching notifications:", error));
        }

    </script>


</body>

</html>