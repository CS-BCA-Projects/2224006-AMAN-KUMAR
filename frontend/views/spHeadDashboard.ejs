<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>SPHead Dashboard - AWGP Seva Portal</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/custom.css">
    <link rel="icon" type="image/png" href="/images/logo.jpg">
    <script src="https://kit.fontawesome.com/a96a0fdf1a.js" crossorigin="anonymous"></script>

    <style>
        body {
            background-color: #f8f9fa;
            font-family: "Roboto", sans-serif;
        }

        .navbar {
            background-color: #0000ff;
        }

        .navbar-brand img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
        }

        .welcome {
            font-size: 18px;
            font-weight: 500;
            text-decoration: underline 2px solid rgb(35, 1, 255);
            text-underline-offset: 5px;
        }

        .table th {
            background-color: blue;
            color: white;
            text-align: center;
            vertical-align: middle;
        }

        .table td {
            vertical-align: middle;
            text-align: center;
        }

        .event-status {
            font-weight: bold;
            padding: 5px 10px;
            border-radius: 5px;
            display: inline-block;
        }

        .pending {
            background-color: #ffc107;
            color: black;
        }

        .assigned {
            background-color: #17a2b8;
            color: white;
        }

        .approved {
            background-color: #007bff;
            color: white;
        }

        .completed {
            background-color: #28a745;
            color: white;
        }

        .rejected {
            background-color: #dc3545;
            color: white;
        }

        .btn-approve {
            background-color: green;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
        }

        .btn-reject {
            background-color: red;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
        }

        .cust-table {
            width: 100%;
            margin-top: 30px;
            border-collapse: separate;
            /* Enables spacing */
            border-spacing: 0 20px;
            /* Adds 10px gap between rows */
        }

        thead {
            background-color: rgb(35, 1, 255);
            color: white;
            margin-bottom: 20px;
        }

        th {
            padding: 10px 10px;
            border-left: 1px solid white;
            text-align: center;
        }

        /* Apply border-radius to first and last header cells */
        table thead tr th:first-child,
        #eventTableBody tr td:first-child {
            border-top-left-radius: 10px;
            border-bottom-left-radius: 10px;
        }

        table thead tr th:last-child,
        #eventTableBody tr td:last-child {
            border-top-right-radius: 10px;
            border-bottom-right-radius: 10px;
        }

        #eventTableBody tr td {
            border: 1px solid rgb(35, 1, 255);
            padding: 10px 20px;
        }

        td {
            vertical-align: middle;
            /* Aligns content vertically */
        }

        td .btn-container {
            display: flex;
            align-items: center;
            justify-content: center;
            /* Centers buttons */
            height: 100%;
            /* Makes container take full td height */
        }

        /* Overlay styling for popups */
        .overlay {
            display: none;
            /* Hidden by default */
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            z-index: 9999;
            align-items: center;
            justify-content: center;
        }

        /* Popup content styling */
        .overlay-content {
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            width: 90%;
            max-width: 400px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
            position: relative;
        }

        /* Close button styling */
        .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 28px;
            border: none;
            background: none;
            color: black;
            cursor: pointer;
        }

        /* Ensure the badge aligns properly on top-right of the bell */
        #notificationBadge {
            position: absolute;
            top: 5px;
            /* Moves badge higher */
            right: -2px;
            /* Moves badge slightly to the right */
            font-size: 10px;
            width: 16px;
            height: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2px;
            border-radius: 50%;
        }

        /* Style for user profile dropdown */
        .profile-dropdown {
            display: none;
            /* Hidden by default */
            position: absolute;
            top: 50px;
            /* Adjust distance below user icon */
            right: 10px;
            /* Align with the user icon */
            background-color: #d9d9d9;
            /* Light gray background */
            border-radius: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            padding: 10px;
            min-width: 180px;
            z-index: 1000;
            border: 2px solid #007bff;
            /* Blue border */
        }

        /* Style for username */
        .profile-dropdown p {
            font-size: 16px;
            font-weight: bold;
            text-align: center;
            margin: 0;
            padding: 10px;
        }

        /* Blue underline */
        .profile-dropdown hr {
            border: 1px solid blue;
            margin: 5px 0;
        }

        /* Logout button */
        .logout-btn {
            width: 100%;
            background: none;
            border: none;
            font-size: 16px;
            font-weight: bold;
            color: black;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 8px 0;
            cursor: pointer;
        }

        /* Logout icon */
        .logout-btn i {
            margin-left: 5px;
        }

        @media (max-width : 991px) {
            #menu-bar-box {
                background-color: #0000ff;
            }

            .navbar-collapse {
                position: absolute;
                z-index: 100;
                top: 60px;
                left: 80%;
            }

            #menu-bar-box a {
                color: black;
                padding: 15px;
            }

            #notifi a {
                margin-left: 20px;
            }
        }
    </style>
</head>

<body>

    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark px-3">
        <a class="navbar-brand" href="#">
            <img src="/images/logo.jpg" alt="Logo"> AWGP Seva Portal
        </a>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto" id="menu-bar-box">
                <li class="nav-item"><a class="nav-link text-white" href="/api/v1/spHead-dashboard">Home</a></li>
                <li class="nav-item"><a class="nav-link text-white" href="/api/v1/about">About</a></li>
                <li class="nav-item"><a class="nav-link text-white" href="/api/v1/contact">Contact</a></li>
                <li class="nav-item"><a class="nav-link text-white" href="/api/v1/help">Help</a></li>
                <!-- ðŸ”” Notification Bell Icon -->
            </ul>
        </div>
        <ul class="navbar-nav ms-auto d-flex flex-row align-items-center justify-content-between">
            <li class="nav-item position-relative me-3" id="notifi">
                <a class="nav-link" href="/api/v1/notifications" id="showNotifications">
                    <i class="fas fa-bell position-relative"></i> <!-- Bell icon -->
                    <span id="notificationBadge" class="badge bg-danger rounded-circle position-absolute"
                        style="display: none;"></span>
                </a>
            </li>

            <!-- ðŸ‘¤ User Profile Icon -->
            <li class="nav-item">
                <a class="nav-link" href="#" id="showUserProfile">
                    <i class="fas fa-user-circle"></i>
                </a>
            </li>
        </ul>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>

    </nav>

    <!-- ðŸ‘¤ User Profile Dropdown (Positioned below user icon) -->
    <div id="userProfileDropdown" class="profile-dropdown">
        <p id="profileUserName"></p>
        <hr> <!-- Blue underline -->
        <button class="logout-btn" onclick="logout()">Log Out <i class="fas fa-sign-out-alt"></i></button>
        <hr> <!-- Blue underline -->
        <button class="logout-btn" onclick="window.location.href='/api/v1/changePassword'">Change Password</button>
    </div>

    <div class="container mt-4">
        <h3 class="welcome">Welcome, <%= spHead.name %>!</h3>
        <p>Let's spread our Gayatri Pariwar and make a better nation.</p>


        <div class="d-flex justify-content-between align-items-center">
            <h4 id="eventTitle" class="mt-4 fs-6 welcome">Recent Requests</h4>
            <select id="eventDropdown" class="form-select w-auto">
                <option value="recent" selected>Assigned Events</option>
                <option value="completed">Completed Events</option>
                <option value="rejected">Rejected Events</option>
            </select>
        </div>

        <!-- Table -->
        <div class="d-none d-md-block">
            <table class="cust-table">
                <thead>
                    <tr>
                        <th>Event Details</th>
                        <th>Date / Time</th>
                        <th>Status</th>
                        <th id="actionColumn">Action</th>
                    </tr>
                </thead>
                <tbody id="eventTableBody">
                    <!-- Dynamically filled via JavaScript -->
                </tbody>
            </table>
        </div>

        <!-- Mobile View (Card Layout) -->
        <div class="d-md-none">
            <h5 class="text-center bg-primary text-white p-2 rounded mt-4">Details</h5>
            <div id="eventCardsContainer">
                <!-- Dynamically filled via JavaScript -->
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function updateEventStatus(eventId, status) {
            console.log("Updating Event ID:", eventId, "Status:", status);

            fetch(`/api/v1/update-status/${eventId}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ status })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        alert(data.error);
                    } else {
                        //   Update event status text and color
                        document.getElementById(`status-${eventId}`).textContent = status;
                        document.getElementById(`status-${eventId}`).className = `event-status ${status.toLowerCase()}`;

                        //   Update action buttons dynamically
                        if (status === "Approved") {
                            document.getElementById(`actions-${eventId}`).innerHTML =
                                `<button class="btn btn-success" onclick="updateEventStatus('${eventId}', 'Completed')">
                                Mark as Done
                            </button>`;
                        } else {
                            document.getElementById(`actions-${eventId}`).innerHTML = "";
                        }
                        location.reload();
                    }
                })
                .catch(error => console.error("Error updating event status:", error));
        }

        document.addEventListener("DOMContentLoaded", function () {
            updateNotificationBadge();
            const eventDropdown = document.getElementById("eventDropdown");
            const eventTableBody = document.getElementById("eventTableBody");
            const eventCardsContainer = document.getElementById("eventCardsContainer")

            //   Ensure JSON data is correctly embedded in EJS
            const recentEvents = JSON.parse('<%- JSON.stringify(recentEventRequests) %>');
            const completedEvents = JSON.parse('<%- JSON.stringify(completedEventRequests) %>');
            const rejectedEvents = JSON.parse('<%- JSON.stringify(rejectedEventRequests) %>');

            function updateEventTable(selectedType) {
                eventTableBody.innerHTML = "";
                eventCardsContainer.innerHTML = ""

                let selectedEvents;
                if (selectedType === "recent") {
                    selectedEvents = recentEvents;
                    eventTitle.textContent = "Your Recent Events";
                    document.querySelector("th#actionColumn").style.display = ""; // Show Action Column
                } else if (selectedType === "completed") {
                    selectedEvents = completedEvents;
                    eventTitle.textContent = "Your Completed Events";
                    document.querySelector("th#actionColumn").style.display = "none"; // Hide Action Column
                } else {
                    selectedEvents = rejectedEvents;
                    eventTitle.textContent = "Your Rejected Events";
                    document.querySelector("th#actionColumn").style.display = "none"; // Hide Action Column
                }

                function getActionButtons(event, isMobile = false) {
                    if (selectedType === "recent") {
                        if (event.status === "Pending" || event.status === "Assigned") {
                            return `
                    <button class="btn btn-success btn-sm" onclick="updateEventStatus('${event.eventId}', 'Approved')">Approve</button>
                    <button class="btn btn-danger btn-sm" onclick="updateEventStatus('${event.eventId}', 'Rejected')">Reject</button>
                `;
                        } else if (event.status === "Approved") {
                            return `<button class="btn btn-primary btn-sm" onclick="updateEventStatus('${event.eventId}', 'Completed')">Mark as Done</button>`;
                        }
                    }
                    return "";
                }


                function getStatusColor(status) {
                    switch (status.toLowerCase()) {
                        case "pending": return "warning";
                        case "approved": return "primary";
                        case "assigned": return "info";
                        case "completed": return "success";
                        case "rejected": return "danger";
                        default: return "secondary";
                    }
                }


                if (selectedEvents.length === 0) {
                    eventTableBody.innerHTML = `<tr><td colspan="4" class="text-center"><strong>No events found.</strong></td></tr>`;
                    eventCardsContainer.innerHTML = `<div><p colspan="4" class="text-center"><strong>No events found.</strong></p></div>`;
                    return;
                }

                selectedEvents.forEach(event => {
                    eventTableBody.innerHTML += `
                        <tr id="event-${event.eventId}">
                            <td class="text-start">
                                <strong>${event.eventType}</strong><br>
                                <span>${event.description}</span><br><br>
                                <strong>Requested By:</strong><br>
                                <span>${event.requester.name}</span><br>
                                <span>${event.requester.email}</span><br>
                                <span>${event.requester.phone}</span><br>
                                <span>${event.requester.address}, ${event.requester.state} - ${event.requester.pinCode}</span>
                            </td>
                            <td>
                                Date: ${new Date(event.requested_date).toLocaleDateString("en-CA")}<br>
                                Time: ${event.requested_time}
                            </td>
                            <td>
                                <span id="status-${event.eventId}" class="event-status ${event.status.toLowerCase()}">
                                    ${event.status}
                                </span>
                            </td>
                            ${selectedType === "recent" ? `
                            <td id="actions-${event.eventId}">
                                ${event.status === "Pending" || event.status === "Assigned"
                                ? `<button class="btn-approve" onclick="updateEventStatus('${event.eventId}', 'Approved')">Approve</button>
                                       <button class="btn-reject" onclick="updateEventStatus('${event.eventId}', 'Rejected')">Reject</button>`
                                : event.status === "Approved"
                                    ? `<button class="btn btn-success" onclick="updateEventStatus('${event.eventId}', 'Completed')">Mark as Done</button>`
                                    : ""
                            }
                            </td>` : ""}
                        </tr>
                    `;
                    // Mobile View Cards
                    eventCardsContainer.innerHTML += `
                        <div class="card mb-3 shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">${event.eventType}</h5>
                                <p class="card-text">${event.description}</p>
                                <p><strong>Requested By:</strong><br> ${event.requester.name}<br>
                                    ${event.requester.email}<br>
                                    ${event.requester.phone}<br>
                                    ${event.requester.address}, ${event.requester.state} - ${event.requester.pinCode}
                                </p>
                                <p><strong>Date:</strong> ${new Date(event.requested_date).toLocaleDateString("en-CA")}<br>
                                <strong>Time:</strong> ${event.requested_time}
                                </p>
                                <p><strong>Status:</strong> <span class="badge bg-${getStatusColor(event.status)}">${event.status}</span></p>
                                ${getActionButtons(event, true)}
                            </div>
                        </div>
                    `;

                });
            }

            //   Initialize table with recent events
            updateEventTable("recent");

            //   Update table when dropdown changes
            eventDropdown.addEventListener("change", function () {
                updateEventTable(eventDropdown.value);


            });
        });

        document.addEventListener("DOMContentLoaded", function () {
            const userProfileBtn = document.getElementById("showUserProfile");
            const userProfileDropdown = document.getElementById("userProfileDropdown");
            const profileUserName = document.getElementById("profileUserName");

            const user = JSON.parse('<%- JSON.stringify(spHead) %>');

            // Show or hide dropdown on click
            userProfileBtn.addEventListener("click", function (event) {
                userProfileDropdown.style.display =
                    userProfileDropdown.style.display === "block" ? "none" : "block";
                event.stopPropagation(); // Prevent closing immediately
                profileUserName.innerHTML = user.name;
            });

            // Hide dropdown when clicking outside
            document.addEventListener("click", function (event) {
                if (!userProfileBtn.contains(event.target) && !userProfileDropdown.contains(event.target)) {
                    userProfileDropdown.style.display = "none";
                }
            });
        });

        // Logout function
        function logout() {
            fetch("/api/v1/logout", { method: "POST" })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert("Logged out successfully!");
                        window.location.href = "/api/v1/login";
                    } else {
                        alert("Logout failed. Try again.");
                    }
                })
                .catch(error => console.error("Error:", error));
        }
        function changePassword() {

        }

        function updateNotificationBadge() {
            fetch("/api/v1/notifications/count")
                .then(response => response.json())
                .then(data => {
                    const notificationBadge = document.getElementById("notificationBadge");

                    if (data.count > 0) {
                        notificationBadge.textContent = data.count;
                        notificationBadge.style.display = "flex"; // Show badge
                    } else {
                        notificationBadge.style.display = "none"; // Hide badge if no notifications
                    }
                })
                .catch(error => console.error("Error fetching notifications:", error));
        }
    </script>


</body>

</html>